// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  email     String?     @unique
  password  String
  username   String?
  isAdmin   Boolean    @default(false)
  posts     BlogPost[] // Posts written by user (admin only)
  comments  Comment[]  // Comments user has written
  likes     Like[]     // Likes user has given
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model BlogPost {
  id        String     @id @default(cuid())
  title     String
  content   String
  imageUrl  String
  category  String
  views     Int        @default(0)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  authorId  String
  author    User       @relation(fields: [authorId], references: [id])

  comments  Comment[]
  likes     Like[]
}

// model Comment {
//   id        String     @id @default(cuid())
//   content   String
//   createdAt DateTime   @default(now())

//   userId    String
//   user      User       @relation(fields: [userId], references: [id])

//   postId    String
//   post      BlogPost   @relation(fields: [postId], references: [id])
// }
model Comment {
  id        String     @id @default(cuid())
  content   String
  createdAt DateTime   @default(now())

  userId    String?    // Now optional for anonymous comments
  user      User?      @relation(fields: [userId], references: [id])

  postId    String
  post      BlogPost   @relation(fields: [postId], references: [id])
}
model Like {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())

  userId    String
  user      User       @relation(fields: [userId], references: [id])

  postId    String
  post      BlogPost   @relation(fields: [postId], references: [id])

  @@unique([userId, postId]) // Prevent duplicate likes
}